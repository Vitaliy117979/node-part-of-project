{
  "openapi": "3.0.1",
  "info": {
    "version": "1.0.1",

    "title": "Swagger test",
    "description": "Showing off swagger-ui-express",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "consumes": ["application/json multipart/form-data"],
  "produces": ["application/json"],
  "servers": [
    { "url": "http://localhost:3030/api" },
    { "url": "https://so-yummy-backend-hg4e.onrender.com/api" }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Authorization endpoints"
    },
    {
      "name": "Subscribe",
      "description": "Subscribe endpoints"
    }
  ],

  "paths": {
    "/users/register": {
      "post": {
        "tags": ["Auth"],
        "summary": "User registration",
        "parameters": [],
        "requestBody": {
          "description": "Registration's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterSchema"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationResponse"
                }
              }
            }
          },
          "400": {
            "description": "missing fields",
            "content": {}
          },
          "409": {
            "description": "Provided email already exists",
            "content": {}
          }
        }
      }
    },
    "/users/login": {
      "post": {
        "tags": ["Auth"],
        "summary": "User login",
        "requestBody": {
          "description": "Login object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful login",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "400": {
            "description": "missing fields",
            "content": {}
          },
          "401": {
            "description": "Unauthorized (email or password is wrong)",
            "content": {}
          }
        }
      }
    },
    "/users/current": {
      "get": {
        "tags": ["Auth"],
        "summary": "Get current user information",
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getCurrent"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized",
            "content": {}
          }
        }
      }
    },
    "/users/logout": {
      "post": {
        "tags": ["Auth"],
        "summary": "User logout",
        "security": [{ "Bearer": [] }],
        "responses": {
          "204": {},
          "401": {
            "description": "Not authorized"
          }
        }
      }
    },
    "/users/update": {
      "patch": {
        "tags": ["Auth"],
        "summary": "Updating user information",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Updata`s object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateUser"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Your data has been updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/updateUserResponse"
                }
              }
            }
          },
          "400": {
            "description": "Name field cannot be empty. or File size exceeds the limit. or Missing fields."
            ,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserUpdateError"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized",
            "content": {}
          }
        }
      }
    },
    "/subscribe": {
      "post": {
        "tags": ["Subscribe"],
        "summary": "User subscribe service",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Subscribe's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/subscribeRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Subscribe successfully changed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/subscribeResponse"
                }
              }
            }
          },
          "400": {
            "description": "Unsuccessful request",
            "content": {}
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "RegisterSchema": {
        "type": "object",
        "required": ["email", "password", "name"],
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "qwerty123"
          },
          "name": {
            "type": "string",
            "description": "User's name",
            "example": "Bogdan"
          }
        }
      },
      "RegistrationResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "Authentication token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0YWE5NjQ0ZWJlYzlmMzc0NzY1MDEzZiIsImlhdCI6MTY4ODkwMTE4OCwiZXhwIjoxNjg4OTgzOTg4fQ.o2KLsNNVlFVi-pkVtvv5CdZ6QK70ooepLMkaijWrLoA"
          },
          "user": {
            "type": "object",
            "properties": {
              "email": {
                "type": "string",
                "description": "User's email",
                "format": "email"
              },
              "name": {
                "type": "string",
                "description": "User's name",
                "example": "Bogdan"
              }
            }
          }
        }
      },
      "LoginSchema": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "qwerty123"
          }
        }
      },
      "getCurrent": {
        "type": "object",
        "required": ["email", "name"],
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "name": {
            "type": "string",
            "description": "User's name",
            "example": "Bogdan"
          }
        }
      },
      "updateUser": {
        "type": "object",
        "required": ["name"],
        "properties": {
          "name": {
            "type": "string",
            "description": "User's name",
            "example": "Mango"
          },
          "avatarURL": {
            "type": "string",
            "format": "binary",
            "description": "User's avatar"
          }
        }
      },
      "updateUserResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "User's name",
            "example": "Mango"
          },
          "avatarURL": {
            "type": "string",
            "format": "binary",
            "contentMediaType": "image/jpeg",
            "description": "User's avatar"
          }
        }
      },
      "AuthResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "Authentication token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0YWE5NjQ0ZWJlYzlmMzc0NzY1MDEzZiIsImlhdCI6MTY4ODkwMTE4OCwiZXhwIjoxNjg4OTgzOTg4fQ.o2KLsNNVlFVi-pkVtvv5CdZ6QK70ooepLMkaijWrLoA"
          },
          "user": {
            "type": "object",
            "properties": {
              "email": {
                "type": "string",
                "description": "User's email",
                "format": "email"
              },
              "name": {
                "type": "string",
                "description": "User's name",
                "example": "Bogdan"
              }
            }
          }
        }
      },
      "subscribeRequest": {
        "type": "object",
        "properties": {
          "subscription": {
            "type": "string",
            "description": "Subscription request",
            "example": "Subscribe for us",
            "enam": ["subscribe", "unsubscribe"]
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          }
        }
      },
      "subscribeResponse": {
        "type": "object",
        "properties": {
          "subscription": {
            "type": "string",
            "description": "Subscription responce",
            "example": "Subscribe for us",
            "enam": ["subscribe", "unsubscribe"]
          }
        }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
